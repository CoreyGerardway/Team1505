import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 1505
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private File inputFile;
    private File outputFile;
    private File nameFile;
    private File outFile;
    private File tempFile;
    private File f;
    private Scanner userFile; // this will eventually create a scanner that will connect to a user file.
    private String[] functionNames;
    private String[] sensorNames;
    private String funcName;  //what the new code function will be

    private PrintStream tempPrint;
    private PrintStream print;

    private final int DELAY = 0;
    private int waitTime = 0;
    private int speeds = 0;
    private int vals = 0;
    private int lineCount = 0;
    private boolean firstRun = true;

    private final int[] mSp = new int[11];  //old motor speed
    private final int[] nSp = new int[11];  //new motor speed
    private final int[] sVal = new int[11]; //old sensor value
    private final int[] nVal = new int[11]; //new sensor value

    private final boolean[] newValue = new boolean[10];
    private final boolean[] newSValue = new boolean[10];

    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Input_File_Chooser = new javax.swing.JFileChooser();
        Input_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Var_Field = new javax.swing.JTextField();
        Generate_Code_Button = new javax.swing.JButton();
        Input_File_Label = new javax.swing.JLabel();
        Output_File_Label = new javax.swing.JLabel();
        Motor_File_Label = new javax.swing.JLabel();
        Line_Count_Label = new javax.swing.JLabel();
        Output_Field = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Code Processor");

        Input_Button.setText("Select Input File (.txt)");
        Input_Button.setToolTipText("");
        Input_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Input_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Name the Function");
        jLabel1.setToolTipText("");

        Generate_Code_Button.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Generate_Code_Button.setText("Generate Code");
        Generate_Code_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Generate_Code_ButtonActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Name the Output File (.c)");
        jLabel2.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("1505 Record Code");
        jLabel3.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Var_Field)
                    .addComponent(Input_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Output_Field)
                    .addComponent(Generate_Code_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Input_File_Label)
                    .addComponent(Output_File_Label)
                    .addComponent(Motor_File_Label)
                    .addComponent(Line_Count_Label)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Input_File_Label)
                .addGap(7, 7, 7)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Output_File_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Motor_File_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Line_Count_Label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Input_Button)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Output_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Var_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Generate_Code_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        jLabel2.getAccessibleContext().setAccessibleName("Name the Output File (.c)");
        jLabel2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Input_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Input_ButtonActionPerformed
        int returnVal = Input_File_Chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            inputFile = Input_File_Chooser.getSelectedFile();
            Input_File_Label.setText(inputFile.getName());
        } else {
            System.out.println("File access canceled by user.");
        }
    }//GEN-LAST:event_Input_ButtonActionPerformed

    private void Generate_Code_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Generate_Code_ButtonActionPerformed
        if (inputFile == null) {
            JOptionPane.showMessageDialog(null, "One or more files are invalid.");
        } else {
            try {
                f = new File(Output_Field.getText());
                parseFile(inputFile, f, nameFile, Var_Field.getText());
                Line_Count_Label.setText(String.valueOf(lineCount));
                complete();
                
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Generate_Code_ButtonActionPerformed

    private String[] getMotorNames(File f) throws FileNotFoundException {
        Scanner sc = new Scanner(f);
        sc.nextLine();
        int lenM = sc.nextInt();
        String[] outM = new String[lenM];
        for(int i = 0; i < lenM; i++){
            outM[i] = sc.nextLine();
        }
        return outM;
    }
    private String[] getSensorNames(File f) throws FileNotFoundException {
        Scanner sc = new Scanner(f);
        String specialTemp1 = sc.nextLine();
        while(!specialTemp1.equalsIgnoreCase("sensors")){
            specialTemp1 = sc.nextLine();
        }
        int lenS = sc.nextInt();
        //System.out.println(lenS);
        String[] outS = new String[lenS];
        for(int j = 0; j < lenS; j++){
            outS[j] = sc.nextLine();
        }
        return outS;
    }

    static int checkMotor(int value) {
        if (value > 127) {
            return 127;
        } else if (value < -127) {
            return -127;
        } else {
            return value;
        }
    }

    private void parseFile(File inFile, File fileOut, File nFile, String varName) throws FileNotFoundException {

        userFile = new Scanner(inFile);
        tempFile = new File("temp.txt");
        outFile = fileOut;
        tempPrint = new PrintStream(tempFile);
        print = new PrintStream(outFile);
        funcName = varName;
        print.println("void " + funcName + "()");
        print.println("{");
        

        //This can also be done in one line see below, fancy nesting of functions.
        //userFile = new Scanner(new File(fileIn));
        //int lines = 0;      //counter starts are zero to count lines in the file
        if (userFile.hasNext()) { //check to see if there is anything to read in the file
            //String temp = userFile.nextLine();
            lineCount++;
            waitTime = userFile.nextInt();//Integer.valueOf(temp.replaceAll(";", "").replaceAll(" ", "")); //remove a line from the file
            waitTime = waitTime - DELAY;
        }
        
        functionNames = getMotorNames(inFile); //This is done after getting waitTime because it uses stuff after the HASH SPEED
        sensorNames = getSensorNames(inFile);
        
        for (int i = 0; i < 10; i++) {
            mSp[i] = 0; //assumes all values are new
        }
        String specialTemp = userFile.nextLine();
        while(!specialTemp.equalsIgnoreCase("init")){
            specialTemp = userFile.nextLine();
        }
        while (userFile.hasNext()) {
            String temp = userFile.nextLine();    //temp string to read in data from the file
            speeds = 0;     //counts how many values are read in.
            vals = 0;
            //System.out.println(temp);
            String tempNum = "";
            for(int i = 0; i < temp.length(); i ++){
                //System.out.println(tempNum);
                if(temp.startsWith("m")){
                    if(i == 0){
                        i++;
                    }
                    if(temp.charAt(i) == 'K'){
                        i = temp.length();
                        continue;
                    }
                    if(temp.substring(i, i + 1).equals(";")){
                        nSp[speeds] = Integer.valueOf(tempNum);
                        speeds++;
                        tempNum = "";
                        continue;
                    }
                    tempNum += temp.substring(i, i + 1);
                }   
                if(temp.startsWith("s")){
                    if(i == 0){
                        i++;
                    }
                    if(temp.charAt(i) == 'K'){
                        i = temp.length();
                        continue;
                    }
                    if(temp.substring(i, i + 1).equals(";")){
                        nVal[vals] = Integer.valueOf(tempNum);
                        vals++;
                        tempNum = "";
                        continue;
                    }
                    tempNum += temp.substring(i, i + 1);
                }
            }
            for (int i = 0; i < 10; i++) {
                newValue[i] = true; //assumes all values are new
                newSValue[i] = true;
            }
            //if (speeds >= functionNames.length) {
                for (int x = 0; x < speeds; x++) {
                    if (mSp[x] == nSp[x]) {
                        newValue[x] = false;
                    } else {
                        mSp[x] = nSp[x];
                    }
                //}
            //} else {
                //for (int x = 0; x < 10; x++) {
                    //newValue[x] = false;
                //}
            } //if (vals >= sensorNames.length) {
                //System.out.println(vals);
                for (int x = 0; x < vals; x++) {
                    if (sVal[x] == nVal[x]) {
                        newSValue[x] = false;
                    } else {
                        sVal[x] = nVal[x];
                    }
                }
            
            tempPrint.println("wait1Msec(" + waitTime + ");");
            for (int x = 0; x < speeds; x++) {
                String tempString = "";
                if (newValue[x] || firstRun) {
                    tempString += ("motorReq[" + functionNames[x] + "] = " + mSp[x] + ";" + "//");
                    //System.out.println(sensorNames[0]);
                    for(int v = 0; v < vals; v++){
                        tempString += (" " + sensorNames[v] + sVal[v]);
                        System.out.println(sensorNames[v] + sVal[v]);
                    }
                    tempPrint.println(tempString);
                    
                }
            }
            firstRun = false;
            //System.out.println("Repeat main loop");
        }
        tempPrint.close();
        //Start to read in the temp file and clean up the code;
        //First 11 Lines Stay the same

        userFile = new Scanner(tempFile);

        for (int i = 0; i < 11; i++) {
            print.println(userFile.nextLine());
        }
        String textInput;
        String textInput2;

        textInput = userFile.nextLine();
        while (userFile.hasNext()) {
            if (textInput.contains("wait1Msec")) {
                int theBigWait = waitTime;
                textInput2 = userFile.nextLine();
                while (textInput2.contains("wait1Msec") && userFile.hasNext()) {
                    theBigWait = theBigWait + waitTime;
                    textInput2 = userFile.nextLine();
                }
                print.println("wait1Msec(" + theBigWait + ");");
                textInput = textInput2;
            } else {
                print.println(textInput);
                textInput = userFile.nextLine();
            }
        }
        print.println("}");
        print.close();
        userFile.close();
    }

    private void complete() {
        JOptionPane.showMessageDialog(null, "OPERATION COMPLETE.");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generate_Code_Button;
    private javax.swing.JButton Input_Button;
    private javax.swing.JFileChooser Input_File_Chooser;
    private javax.swing.JLabel Input_File_Label;
    private javax.swing.JLabel Line_Count_Label;
    private javax.swing.JLabel Motor_File_Label;
    private javax.swing.JTextField Output_Field;
    private javax.swing.JLabel Output_File_Label;
    private javax.swing.JTextField Var_Field;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
